name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  #build:
    #needs: test
   # runs-on: ubuntu-latest
    #if: ${{ success() }}
   # steps:
   # - uses: actions/checkout@v4
    #- name: Build the Docker image
   #   run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)
      
  test-and-build:
    env: 
      IMAGE_NAME: evms
      PROJECT_ID: valiant-ocean-450906-j4
      
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12
        env: 
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U testuser -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - uses: google-github-actions/setup-gcloud@v2
      with: 
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.PROJECT_ID }}
        export_default_credentials: True

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2-utils
        
    - name: Install project dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

   # - name: Initialize Database
   #   run: |
        # Example: Run your database schema setup and any necessary migrations
   #     python manage.py migrate

    - name: Run tests with coverage
      env: 
        DATABASE_URL: postgres://testuser:testpassword@localhost:5432/testdb
      run: | 
        coverage-3.10 run --source='.' manage.py test api
        coverage report -m
        coverage xml
        
    - name: Check test coverage meets threshold
      id: coverage
      run: |
        COVERAGE=$(coverage xml -o - | xmllint --xpath "string(//coverage/@line-rate)" -)
        THRESHOLD=0.80
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "Test coverage ($COVERAGE) is below the threshold ($THRESHOLD)."
          exit 1
        fi
    
    - name: Configure Docker Client
      if: success()
      run: |-
        gcloud auth configure-docker asia-southeast2-docker.pkg.dev --quiet
        
    - name: Build Docker image
      if: success()
      #if: ${{ success() }} # Execute if previous step (unit test) is successful
      run: |
        # Add your Docker build commands here
        # For example, build a Docker image
        # docker build -t my-image .
        #echo "Docker image built successfully"
        docker build -t asia-southeast2-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}/${{ env.IMAGE_NAME }}:latest .
     # continue-on-error: ${{ always() }} # Continue even if image build fails

    - name: Authenticate Docker with GCR
      run: |
        gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io

    - name: Push Docker Image to GCR (Container Registry)
      env: 
        GIT_TAG: v0.1.0
      run: |-
        docker push asia-southeast2-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}/${{ env.IMAGE_NAME }}:latest
        #docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ env.GIT_TAG }}
  

  
